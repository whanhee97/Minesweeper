{"version":3,"sources":["Td.jsx","Tr.jsx","Table.jsx","Form.jsx","MineSearch.jsx","App.js","reportWebVitals.js","index.js"],"names":["getTdStyle","code","CODE","NORMAL","MINE","background","CLICKED_MINE","OPENED","QUESTION_MINE","QUESTION","FLAG_MINE","FLAG","getTdText","icon","faBomb","faFlag","faQuestion","Td","memo","rowIndex","cellIndex","useContext","TableContext","tableData","dispatch","halted","onClickTd","useCallback","console","log","type","OPEN_CELL","row","cell","CLICK_MINE","onRightClickTd","e","preventDefault","FLAG_CELL","QUESTION_CELL","NORMAL_CELL","style","onClick","onContextMenu","Tr","Array","length","fill","map","td","i","Table","tr","Form","useState","setRow","setCell","mine","setMine","onChangeRow","target","value","onChangeCell","onChangeMine","onClickBtn","START_GAME","class","placeholder","onChange","createContext","initialState","timer","result","gameData","isWin","plantMine","data","shuffle","chosen","Math","floor","random","includes","push","rowData","j","k","ver","hor","INCREMENT_TIMER","reducer","state","action","forEach","checked","openCount","checkAround","around","concat","count","filter","v","near","n","skull","faSkullCrossbones","MineSearch","useReducer","useMemo","useEffect","setInterval","clearInterval","Provider","faStopwatch","faSmileWink","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.533cd864.chunk.js","sourcesContent":["import React, { memo, useCallback, useContext } from 'react'\nimport { CODE, OPEN_CELL, CLICK_MINE, TableContext, FLAG_CELL,  QUESTION_CELL, NORMAL_CELL} from './MineSearch';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {  faBomb, faFlag, faQuestion} from '@fortawesome/free-solid-svg-icons'\n\nconst getTdStyle = (code) => {\n    switch (code) {\n        case CODE.NORMAL:\n        case CODE.MINE:\n            return {\n                background: '#444',\n            };\n        case CODE.CLICKED_MINE:\n            return {\n                background: 'red',\n            };\n        case CODE.OPENED:\n            return {\n                background: 'white',\n            };\n        case CODE.QUESTION_MINE:\n        case CODE.QUESTION:\n            return {\n                background: 'yellow',\n            }\n        case CODE.FLAG_MINE:\n        case CODE.FLAG:\n            return {\n                background: 'green',\n            }\n        default:\n            return {\n                background: 'white',\n            };\n    }\n};\n\nconst getTdText = (code) => {\n    switch (code) {\n        case CODE.NORMAL:\n            return '';\n        case CODE.MINE:\n            return '';\n        case CODE.CLICKED_MINE:\n            const boom = <FontAwesomeIcon icon={faBomb} />\n            return boom;\n        case CODE.FLAG_MINE:\n        case CODE.FLAG:\n            const flag = <FontAwesomeIcon icon={faFlag} />\n            return flag;\n        case CODE.QUESTION_MINE:\n        case CODE.QUESTION:\n            const question = <FontAwesomeIcon icon={faQuestion} />\n            return question;\n        default:\n            return code || '';\n    }\n\n};\n\nconst Td = memo(({ rowIndex, cellIndex }) => {\n    const { tableData, dispatch, halted } = useContext(TableContext);\n    \n    const onClickTd = useCallback(() => {\n        console.log(halted)\n        if (halted) {\n            return;\n        }\n        switch (tableData[rowIndex][cellIndex]) {\n            case CODE.OPENED:\n            case CODE.FLAG_MINE:\n            case CODE.FLAG:\n            case CODE.QUESTION_MINE:\n            case CODE.QUESTION:\n                return;\n            case CODE.NORMAL:\n                dispatch( {type: OPEN_CELL, row: rowIndex, cell: cellIndex} );\n                return;\n            case CODE.MINE:\n                dispatch( {type: CLICK_MINE, row: rowIndex, cell: cellIndex} );\n                return;\n            default:\n                return;\n        }\n        \n    }, [tableData,cellIndex,rowIndex,dispatch ,halted]);\n\n    const onRightClickTd = useCallback((e) => {\n        e.preventDefault(); // 디폴트로 메뉴가 뜨는것을 방지\n        \n        if (halted) {\n            return;\n        }\n        switch (tableData[rowIndex][cellIndex]) {\n            case CODE.OPENED:\n                return;\n            case CODE.NORMAL:\n            case CODE.MINE:\n                dispatch( {type: FLAG_CELL, row: rowIndex, cell: cellIndex} );\n                return;\n            case CODE.FLAG_MINE:\n            case CODE.FLAG:\n                dispatch( {type: QUESTION_CELL, row: rowIndex, cell: cellIndex} );\n                return;\n            case CODE.QUESTION_MINE:\n            case CODE.QUESTION:\n                dispatch( {type: NORMAL_CELL, row: rowIndex, cell: cellIndex} );\n                return;\n            default:\n                return;\n        }\n    }, [tableData,cellIndex,rowIndex,dispatch ,halted]);\n\n    return (\n        <td\n            style={getTdStyle(tableData[rowIndex][cellIndex])}\n            onClick={onClickTd}\n            onContextMenu={onRightClickTd}\n        >{getTdText(tableData[rowIndex][cellIndex])}\n        </td>\n    )\n\n});\n\nexport default Td;","import React, { memo, useContext } from 'react'\nimport { TableContext } from './MineSearch'\nimport Td from './Td'\nconst Tr = memo(({ rowIndex }) => {\n    const { tableData } = useContext(TableContext);\n\n    return (\n        <tr>\n            {tableData[0] && Array(tableData[0].length).fill().map((td, i) => <Td rowIndex={ rowIndex } cellIndex={i} />)}\n        </tr>\n    )\n})\n\nexport default Tr;","import React, { memo, useContext } from 'react'\nimport { TableContext } from './MineSearch'\nimport Tr from './Tr'\n\nconst Table = memo(() => {\n    const { tableData } = useContext(TableContext);\n\n    return (\n        <table>\n            {Array(tableData.length).fill().map((tr, i) => <Tr rowIndex={i} />)}\n        </table>\n    )\n\n})\n\nexport default Table;","import React, {useState, useCallback, useContext, memo} from 'react'\nimport { TableContext, START_GAME } from './MineSearch'\n\nconst Form = memo(() => {\n    const [row, setRow] = useState(10); // 줄(세로)\n    const [cell, setCell] = useState(10); // 칸(가로)\n    const [mine, setMine] = useState(20); // 지뢰 개수\n    const { dispatch }= useContext(TableContext);\n\n    // useCallback으로 감싸주면 불필요한 렌더링 막아줌\n    const onChangeRow = useCallback((e) => {\n        setRow(e.target.value);\n    }, []);\n\n    const onChangeCell = useCallback((e) => {\n        setCell(e.target.value);\n    }, []);\n\n    const onChangeMine = useCallback((e) => {\n        setMine(e.target.value);\n    }, []);\n\n    const onClickBtn = useCallback(() => {\n        dispatch({ type: START_GAME, row, cell, mine});\n    }, [dispatch, row, cell, mine]);\n\n    return (\n        <div class=\"set-option\">\n            <input type=\"number\" placeholder=\"세로\" value={row} onChange={onChangeRow} />\n            <input type=\"number\" placeholder=\"가로\" value={cell} onChange={onChangeCell} />\n            <input type=\"number\" placeholder=\"지뢰\" value={mine} onChange={onChangeMine} />\n            <button onClick={onClickBtn}>시작</button>\n        </div>\n    )\n})\n\nexport default Form;","import React, {useReducer, createContext, useMemo, useEffect} from 'react'\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport Table from './Table'\nimport Form from './Form'\nimport { faSkullCrossbones, faSmileWink, faStopwatch } from '@fortawesome/free-solid-svg-icons';\n\n// 지뢰 상태 코드\nexport const CODE = {\n    MINE: -7, // 지뢰\n    NORMAL: -1, // 일반\n    QUESTION: -2, // 물음표\n    FLAG: -3, // 깃발\n    QUESTION_MINE: -4, // 지뢰 있는 칸의 물음표\n    FLAG_MINE: -5, // 지뢰 있는 칸의 깃발\n    CLICKED_MINE: -6, // 지뢰 클릭\n    OPENED: 0 // 정상적으로 오픈한 칸 -> 0 이상이면 전부 오픈\n};\n\n// 초기값 세팅\nexport const TableContext = createContext({\n    tableData: [],\n    dispatch: () => {},\n    halted: true,\n});\n\nconst initialState = {\n    tableData: [],\n    timer: 0,\n    result: '',\n    halted: true,\n    gameData: {\n        row: 0,\n        cell: 0,\n        mine: 0,\n    },\n    isWin: false,\n}\n\nconst plantMine = (row, cell, mine) => {\n    const data = [];\n    const shuffle = [];\n    // 난수 생성 후 셔플 리스트에 넣어주기\n    let i = 0;\n    while (i < mine) {\n        const chosen = Math.floor(Math.random() * (row*cell))\n        if (shuffle.includes(chosen) === false) {\n            shuffle.push(chosen);\n            i++;\n        }\n    }\n    \n    // 데이타 맵을 전부 노멀로 초기화\n    for (let i = 0; i < row; i++) {\n        const rowData = [];\n        data.push(rowData);\n        for (let j = 0; j < cell; j++) {\n            rowData.push(CODE.NORMAL);\n        }\n    }\n\n    // 가로 세로 계산해서 지뢰 심기\n    for (let k = 0; k < shuffle.length; k++) {\n        const ver = Math.floor(shuffle[k] / cell);\n        const hor = shuffle[k] % cell;\n        data[ver][hor] = CODE.MINE;\n    }\n    \n    return data;\n}\n\nexport const START_GAME = 'START_GAME';\nexport const OPEN_CELL = 'OPEN_CELL';\nexport const CLICK_MINE = 'CLICK_MINE';\nexport const FLAG_CELL = 'FLAG_CELL';\nexport const QUESTION_CELL = 'QUESTION_CELL';\nexport const NORMAL_CELL = 'NORMAL_CELL';\nexport const INCREMENT_TIMER = 'INCREMENT_TIMER';\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case START_GAME:\n            return {\n                ...state,\n                tableData: plantMine(action.row, action.cell, action.mine),\n                halted: false,\n                gameData: {\n                    row: action.row,\n                    cell: action.cell,\n                    mine: action.mine,\n                },\n                timer: 0,\n                result: '',\n                isWin: false,\n            };\n        case OPEN_CELL: {\n            const tableData = [...state.tableData];\n            //tableData[action.row] = [...state.tableData[action.row]];\n            tableData.forEach((row,i) => {\n                tableData[i] = [...row];\n            }) // 모든 칸을 새로운 객체로 만들어 준다.\n            const checked = [];\n\n            let openCount = 0;\n\n            const checkAround = (row, cell) => {\n                // 상하 좌우 필터링\n                if (row < 0  || row >= tableData.length || cell < 0 || cell >= tableData[0].length) { \n                    return;\n                }\n                // 못여는 칸 필터링\n                if ([CODE.FLAG,CODE.FLAG_MINE,CODE.OPENED,CODE.QUESTION,CODE.QUESTION_MINE].includes(tableData[row][cell])) {\n                    return;\n                }\n                // 중복 체크\n                if (checked.includes(row + ',' + cell)) {\n                    return;\n                } else {\n                    checked.push(row + ',' + cell);\n                }\n                let around = [] // 주변의 상태 값을 담는다 \n                if (tableData[row - 1]) { // 양 옆이 없을 때는 undefined를 배열에 담는다\n                    around = around.concat(\n                        [tableData[row - 1][cell - 1],\n                        tableData[row - 1][cell],\n                        tableData[row - 1][cell + 1],]\n                    );\n                }\n\n                around = around.concat(\n                    [tableData[row][cell - 1],\n                    tableData[row][cell + 1],]\n                );\n\n                if (tableData[row + 1]) {\n                    around = around.concat(\n                        [tableData[row + 1][cell - 1],\n                        tableData[row + 1][cell],\n                        tableData[row + 1][cell + 1],]\n                    );\n                }\n                 \n                const count = around.filter((v) => [CODE.FLAG_MINE,CODE.MINE,CODE.QUESTION_MINE].includes(v)).length;\n                \n\n                if (count === 0) {\n                    if (row > -1) {\n                        const near = [];\n                        if (row - 1 > -1) {\n                            near.push([row-1,cell-1]);\n                            near.push([row-1,cell]);\n                            near.push([row-1,cell+1]);\n                        }\n                        near.push([row,cell-1]);\n                        near.push([row,cell+1]);\n                        if (row + 1 < tableData.length) {\n                            near.push([row+1,cell-1]);\n                            near.push([row+1,cell]);\n                            near.push([row+1,cell+1]);\n                        }\n                        near.forEach((n) => {\n                            if(tableData[n[0]][n[1]] !== CODE.OPENED) {\n                                checkAround(n[0],n[1]);\n                            }\n                        })\n                    }\n                    \n                }\n                tableData[row][cell] = count;\n            };\n\n            checkAround(action.row, action.cell);\n\n            tableData.forEach((tr,i)=>{\n                tr.forEach((td,j)=>{\n                    if (td >= 0) {\n                        openCount += 1;\n                    }\n                })\n            })\n            \n            let halted = false;\n            let result = '';\n            let isWin = false;\n            if (openCount === state.gameData.row*state.gameData.cell-state.gameData.mine) {\n                halted = true;\n                result = <div>You won in {state.timer} seconds!!</div>;\n                isWin = true;\n            }   \n            return {\n                ...state,\n                tableData,\n                halted,\n                result,\n                isWin,\n            }\n            \n        }\n        case CLICK_MINE: {\n            const tableData = [...state.tableData];\n            tableData[action.row] = [...state.tableData[action.row]];\n            tableData[action.row][action.cell] = CODE.CLICKED_MINE;\n            for(let i = 0 ; i < state.gameData.row; i++) {\n                for(let j = 0 ; j < state.gameData.cell; j++) {\n                    if (tableData[i][j] === CODE.MINE || tableData[i][j] === CODE.FLAG_MINE) {\n                        tableData[i][j] = CODE.CLICKED_MINE;\n                    }\n                }\n            }\n\n            const skull =  (\n            <div>\n                <FontAwesomeIcon icon={faSkullCrossbones} /> <div>YOU DIE</div>\n            </div>)\n            return {\n                ...state,\n                tableData,\n                result: skull,\n                halted: true,\n            }\n        }\n        case FLAG_CELL: {\n            const tableData = [...state.tableData];\n            tableData[action.row] = [...state.tableData[action.row]];\n            tableData[action.row][action.cell] = tableData[action.row][action.cell]===CODE.MINE?CODE.FLAG_MINE:CODE.FLAG;\n            return {\n                ...state,\n                tableData,\n            }\n        }\n        case QUESTION_CELL: {\n            const tableData = [...state.tableData];\n            tableData[action.row] = [...state.tableData[action.row]];\n            tableData[action.row][action.cell] = tableData[action.row][action.cell]===CODE.FLAG_MINE?CODE.QUESTION_MINE:CODE.QUESTION;\n            return {\n                ...state,\n                tableData,\n            }\n        }\n        case NORMAL_CELL: {\n            const tableData = [...state.tableData];\n            tableData[action.row] = [...state.tableData[action.row]];\n            tableData[action.row][action.cell] = tableData[action.row][action.cell]===CODE.QUESTION_MINE?CODE.MINE:CODE.NORMAL;\n            return {\n                ...state,\n                tableData,\n            }\n        }\n        case INCREMENT_TIMER: {\n            return {\n                ...state,\n                timer: state.timer + 1,\n            }\n        }\n        default: \n            return state;\n    }\n}\n\n\nconst MineSearch = () => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const { tableData, halted, timer, result } = state;\n    //useMemo로 캐싱을 해줘야 contextAPI 사용시 계속되는 렌더링을 막을 수 있다.\n    const value = useMemo(() => ({ tableData: tableData, halted: halted, dispatch }), [tableData, halted]);\n\n    useEffect(() => {\n        let timer;\n        if (!halted){\n            timer = setInterval(() => {\n                dispatch({ type: INCREMENT_TIMER });\n            }, 1000);\n        }\n        return () => {\n            clearInterval(timer);\n        }\n    },[halted]);\n\n    return (\n        //value = {{ tableData: state.tableData, dispatch }} 원래는 이렇게 들어가지만 useMemo로 캐싱해줌\n        <TableContext.Provider value = {value}>  \n            <Form />\n            <div class=\"timer\"><FontAwesomeIcon icon={faStopwatch} /> {timer}</div>\n            <Table />\n            \n            {state.isWin?<div class=\"result-win\"><FontAwesomeIcon icon={faSmileWink} /> {result}</div>:<div class=\"result-fail\">{result}</div>}\n        </TableContext.Provider>\n    )\n    \n}\n\nexport default MineSearch;","import \"./App.css\";\nimport MineSearch from \"./MineSearch\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MineSearch />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}